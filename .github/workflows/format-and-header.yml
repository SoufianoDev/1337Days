name: Update 42 Headers

on:
  push:
    branches: [main]

jobs:
  update-headers:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # This ensures we get full git history

      - name: Setup Git
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Process Headers
        run: |
          set -eo pipefail
          author="SoufianoDev"
          header_email="contact.devsoufiano@gmail.com"
          updated=$(date +"%Y/%m/%d %H:%M:%S")
          target_length=84
          ref_filename="ft_putchar.c"
          ruler="/*   $ref_filename"
          template_line="$ruler                                       :+:      :+:    :+:   */"
          spaces_str=${template_line#"$ruler"}
          spaces_str=${spaces_str%%:+:*}
          reserved_space=${#spaces_str}
          suffix=":+:      :+:    :+:   */"

          # Function to get the most accurate creation date
          get_creation_date() {
            local file="$1"
            local git_first_commit=""
            local filesystem_creation=""
            
            # Try to get first commit date from git history
            git_first_commit=$(git log --reverse --format="%ad" --date=format:"%Y/%m/%d %H:%M:%S" -- "$file" 2>/dev/null | head -n1 || echo "")
            
            # Get filesystem creation time (as fallback, but less reliable)
            if command -v stat >/dev/null 2>&1; then
              # Linux/Unix systems
              filesystem_creation=$(stat -c "%W" "$file" 2>/dev/null || echo "")
              if [ "$filesystem_creation" != "" ] && [ "$filesystem_creation" != "0" ]; then
                filesystem_creation=$(date -d "@$filesystem_creation" +"%Y/%m/%d %H:%M:%S" 2>/dev/null || echo "")
              else
                filesystem_creation=""
              fi
            fi
            
            # Prefer git history over filesystem metadata
            if [ -n "$git_first_commit" ]; then
              echo "$git_first_commit"
            elif [ -n "$filesystem_creation" ]; then
              echo "$filesystem_creation"
            else
              # Ultimate fallback to current date
              echo "$(date +"%Y/%m/%d %H:%M:%S")"
            fi
          }

          while IFS= read -r -d '' file; do
            filename=$(basename "$file")
            filename_len=${#filename}
            diff_len=$(( filename_len - ${#ref_filename} ))
            spaces_after=$(( reserved_space - diff_len ))
            (( spaces_after < 0 )) && spaces_after=0
            new_ruler="/*   $filename"
            new_line=$(printf "%s%*s%s" "$new_ruler" "$spaces_after" "" "$suffix")

            if head -n 1 "$file" | grep -q "/\* \*\*\*"; then
              # File already has header, check if we need to update it
              
              # Get the accurate creation date for comparison
              accurate_created=$(get_creation_date "$file")
              
              # Extract current creation date from header
              current_created_line=$(grep -E "Created: [0-9]{4}/[0-9]{2}/[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}" "$file" 2>/dev/null || echo "")
              current_created=""
              if [ -n "$current_created_line" ]; then
                current_created=$(echo "$current_created_line" | sed -E 's/.*Created: ([0-9]{4}\/[0-9]{2}\/[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}).*/\1/')
              fi
              
              # Check if file has been modified since last commit
              if git diff --quiet HEAD -- "$file" 2>/dev/null; then
                # File has no changes, but check if we need to update filename or creation date
                current_line=$(grep -m1 -E "/\*   .*:\+:" "$file" 2>/dev/null || echo "")
                needs_update=false
                
                if [ -n "$current_line" ]; then
                  current_filename=$(echo "$current_line" | sed -E 's/\/\*   ([^ ]+).*/\1/')
                  if [ "$current_filename" != "$filename" ]; then
                    needs_update=true
                  fi
                fi
                
                # Check if creation date needs correction (preventive measure)
                if [ -n "$current_created" ] && [ "$current_created" != "$accurate_created" ]; then
                  needs_update=true
                  echo "⚠️  Correcting creation date for $filename: $current_created → $accurate_created"
                fi
                
                if [ "$needs_update" = true ]; then
                  sed -i -E \
                    -e "s|/\*   ${current_filename:-$filename}.*\*/|${new_line}|" \
                    -e "s|(Created: )[0-9]{4}/[0-9]{2}/[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}|\1$accurate_created|" \
                    "$file"
                fi
              else
                # File has changes, update filename, creation date (if needed), and Updated date
                current_line=$(grep -m1 -E "/\*   .*:\+:" "$file" 2>/dev/null || echo "")
                if [ -n "$current_line" ]; then
                  current_filename=$(echo "$current_line" | sed -E 's/\/\*   ([^ ]+).*/\1/')
                  
                  # Check if creation date needs correction
                  if [ -n "$current_created" ] && [ "$current_created" != "$accurate_created" ]; then
                    echo "⚠️  Correcting creation date for $filename: $current_created → $accurate_created"
                  fi
                  
                  sed -i -E \
                    -e "s|/\*   ${current_filename}.*\*/|${new_line}|" \
                    -e "s|(Created: )[0-9]{4}/[0-9]{2}/[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}|\1$accurate_created|" \
                    -e "s|(Updated: )[0-9]{4}/[0-9]{2}/[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2} by [^ ]+|\1$updated by $author|" \
                    "$file"
                fi
              fi
            else
              # File doesn't have header, create new one with accurate creation date
              created=$(get_creation_date "$file")
              
              # Create the reference header using printf to avoid YAML parsing issues
              reference_header=$(printf "%s\n" \
                "/* ************************************************************************** */" \
                "/*                                                                            */" \
                "/*                                                        :::      ::::::::   */" \
                "/*   ft_putchar.c                                       :+:      :+:    :+:   */" \
                "/*                                                    +:+ +:+         +:+     */" \
                "/*   By: SoufianoDev <contact.devsoufiano@gmail.com> +#+  +:+       +#+        */" \
                "/*                                                +#+#+#+#+#+   +#+           */" \
                "/*   Created: 2025/06/16 19:52:01 by SoufianoDev       #+#    #+#             */" \
                "/*   Updated: 2025/06/16 18:52:18 by SoufianoDev       ###   ########.fr       */" \
                "/*                                                                            */" \
                "/* ************************************************************************** */")
              
              new_header=$(echo "$reference_header" | \
                sed -e "s|ft_putchar.c|${filename}|" \
                    -e "s|2025/06/16 19:52:01|${created}|" \
                    -e "s|2025/06/16 18:52:18|${updated}|")
              new_header=$(echo "$new_header" | awk -v line="$new_line" '
                /\/\*   .*:\+:/ {
                  print line
                  next
                }
                { print }
              ')
              temp_file=$(mktemp)
              echo "$new_header" > "$temp_file"
              printf "\n" >> "$temp_file"
              cat "$file" >> "$temp_file"
              mv "$temp_file" "$file"
            fi
          done < <(find . -type f \( -name "*.c" -o -name "*.h" \) -print0)

      - name: Commit Changes
        uses: stefanzweifel/git-auto-commit-action@v6
        with:
          commit_message: "ci: add 42 Network header"
          commit_user_name: "${{ github.actor }}"
          commit_user_email: "${{ github.actor }}@users.noreply.github.com"