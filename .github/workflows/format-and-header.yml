name: Update 42 Headers

on:
  push:
    branches: [main]

jobs:
  update-headers:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Git
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Get Changed and New Files
        id: changed-files
        run: |
          CHANGED_FILES=$(git diff --name-only --diff-filter=AM HEAD^ HEAD | grep -E '\.(c|h)$' || echo "")
          echo "changed_files<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          if [ -n "$CHANGED_FILES" ]; then
            echo "Changed/Added C/H files found:"
            echo "$CHANGED_FILES"
          else
            echo "No C/H files changed or added in this push"
          fi

      - name: Process Headers
        if: steps.changed-files.outputs.changed_files != ''
        id: process-headers
        run: |
          # Remove strict error handling to continue processing even if one file fails
          set +e
          author="SoufianoDev"
          header_email="contact.devsoufiano@gmail.com"
          # Set timezone to Morocco (UTC+1)
          export TZ='Africa/Casablanca'
          updated=$(date +"%Y/%m/%d %H:%M:%S")
          
          get_creation_date() {
            local file="$1"
            # Get first commit date for this file from git history
            export TZ='Africa/Casablanca'
            git log --reverse --format="%ad" --date=format:"%Y/%m/%d %H:%M:%S" -- "$file" 2>/dev/null | head -n1 || echo "$(date +"%Y/%m/%d %H:%M:%S")"
          }
          
          get_last_modified_date() {
            local file="$1"
            # Get last commit date for this file from git history
            export TZ='Africa/Casablanca'
            git log -1 --format="%ad" --date=format:"%Y/%m/%d %H:%M:%S" -- "$file" 2>/dev/null || echo "$(date +"%Y/%m/%d %H:%M:%S")"
          }
          target_length=85
          ref_filename="ft_putchar.c"
          ruler="/*   $ref_filename"
          template_line="$ruler                                               :+:      :+:    :+:  */"
          spaces_str=${template_line#"$ruler"}
          spaces_str=${spaces_str%%:+:*}
          reserved_space=${#spaces_str}
          suffix=":+:      :+:    :+:  */"

          updated_count=0
          new_header_count=0
          fixed_corrupted_count=0
          
          changed_files="${{ steps.changed-files.outputs.changed_files }}"
          
          while IFS= read -r file; do
            [ -z "$file" ] && continue
            [ ! -f "$file" ] && continue
            
            echo "üîç Processing changed file: $file"
            
            filename=$(basename "$file")
            filename_len=${#filename}
            diff_len=$(( filename_len - ${#ref_filename} ))
            spaces_after=$(( reserved_space - diff_len ))
            (( spaces_after < 0 )) && spaces_after=0
            new_ruler="/*   $filename"
            new_line=$(printf "%s%*s%s" "$new_ruler" "$spaces_after" "" "$suffix")

            if head -n 1 "$file" | grep -q "/\* \*\*\*"; then
              # File has existing header - update it with git history dates
              created_from_git=$(get_creation_date "$file")
              updated_from_git=$(get_last_modified_date "$file")
              
              header_lines=$(head -n 11 "$file")
              current_header_width=$(echo "$header_lines" | head -n 1 | wc -c)
              current_header_width=$((current_header_width - 1))
              
              is_header_corrupted=false
              
              if [ "$current_header_width" -ne 85 ]; then
                is_header_corrupted=true
                echo "‚ùå Header corrupted for $filename (invalid width: $current_header_width ‚â† 85)"
              fi
              
              current_line=$(grep -m1 -E "/\*   .*:\+:" "$file" 2>/dev/null || echo "")
              if [ -n "$current_line" ]; then
                current_filename=$(echo "$current_line" | sed -E 's/\/\*   ([^ ]+).*/\1/')
                if [ "$current_filename" != "$filename" ]; then
                  is_header_corrupted=true
                  echo "‚ùå Header corrupted for $filename (wrong filename: $current_filename ‚â† $filename)"
                fi
              fi
              
              current_created_line=$(grep -E "Created: [0-9]{4}/[0-9]{2}/[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}" "$file" 2>/dev/null || echo "")
              if [ -z "$current_created_line" ]; then
                is_header_corrupted=true
                echo "‚ùå Header corrupted for $filename (invalid creation date format)"
              fi
              
              if [ "$is_header_corrupted" = true ]; then
                echo "üóëÔ∏è  Removing corrupted header from $filename"
                echo "üîÑ Replacing with new compliant header"
                
                original_created=""
                existing_created_line=$(grep -E "Created: [0-9]{4}/[0-9]{2}/[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}" "$file" 2>/dev/null | head -n1 || echo "")
                if [ -n "$existing_created_line" ]; then
                  original_created=$(echo "$existing_created_line" | sed -E 's/.*Created: ([0-9]{4}\/[0-9]{2}\/[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}).*/\1/')
                fi
                
                if [ -z "$original_created" ]; then
                  original_created="$created_from_git"
                fi
                
                new_header=$(printf "%s\n" \
                  "/* ********************************************************************************* */" \
                  "/*                                                                                   */" \
                  "/*                                                                :::      ::::::::  */" \
                  "/*   $filename                                               :+:      :+:    :+:  */" \
                  "/*                                                            +:+ +:+         +:+    */" \
                  "/*   By: $author <$header_email>         +#+  +:+       +#+      */" \
                  "/*                                                         +#+#+#+#+#+   +#+         */" \
                  "/*       Created: $original_created by $author            #+#    #+#           */" \
                  "/*       Updated: $updated_from_git by $author            ###   ########.fr    */" \
                  "/*                                                                                   */" \
                  "/* ********************************************************************************* */")
                
                new_header=$(echo "$new_header" | awk -v line="$new_line" '
                  /\/\*   .*:\+:/ {
                    print line
                    next
                  }
                  { print }
                ')
                
                temp_file=$(mktemp)
                echo "$new_header" > "$temp_file"
                printf "\n" >> "$temp_file"
                tail -n +12 "$file" >> "$temp_file"
                mv "$temp_file" "$file"
                
                echo "‚úÖ Corrupted header removed and replaced for $filename (preserved original creation date: $original_created)"
                ((fixed_corrupted_count++))
              else
                # Update existing valid header with git history dates
                sed -i -E \
                  -e "s|(Updated: )[0-9]{4}/[0-9]{2}/[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2} by [^ ]+|\1$updated_from_git by $author|" \
                  "$file"
                echo "‚è∞ Valid header - Updated with git history timestamp for $filename"
                ((updated_count++))
              fi
            else
              # File has no header - create new one with git history dates
              created_from_git=$(get_creation_date "$file")
              updated_from_git=$(get_last_modified_date "$file")
              
              reference_header=$(printf "%s\n" \
                "/* ********************************************************************************* */" \
                "/*                                                                                   */" \
                "/*                                                                :::      ::::::::  */" \
                "/*   ft_putchar.c                                               :+:      :+:    :+:  */" \
                "/*                                                            +:+ +:+         +:+    */" \
                "/*   By: SoufianoDev <contact.devsoufiano@gmail.com>         +#+  +:+       +#+      */" \
                "/*                                                         +#+#+#+#+#+   +#+         */" \
                "/*       Created: 2025/06/17 02:01:35 by SoufianoDev            #+#    #+#           */" \
                "/*       Updated: 2025/06/17 01:01:51 by SoufianoDev            ###   ########.fr    */" \
                "/*                                                                                   */" \
                "/* ********************************************************************************* */")
              
              new_header=$(echo "$reference_header" | \
                sed -e "s|ft_putchar.c|${filename}|" \
                    -e "s|2025/06/17 02:01:35|${updated_from_git}|" \
                    -e "s|2025/06/17 01:01:51|${created_from_git}|")
              new_header=$(echo "$new_header" | awk -v line="$new_line" '
                /\/\*   .*:\+:/ {
                  print line
                  next
                }
                { print }
              ')
              temp_file=$(mktemp)
              echo "$new_header" > "$temp_file"
              printf "\n" >> "$temp_file"
              cat "$file" >> "$temp_file"
              mv "$temp_file" "$file"
              echo "‚úÖ New header added for $filename"
              ((new_header_count++))
            fi
          done <<< "$changed_files"

          echo "UPDATED_COUNT=$updated_count" >> $GITHUB_ENV
          echo "NEW_HEADER_COUNT=$new_header_count" >> $GITHUB_ENV
          echo "FIXED_CORRUPTED_COUNT=$fixed_corrupted_count" >> $GITHUB_ENV

          # Always exit successfully since we want to commit changes even if some files failed
          exit 0

      - name: Commit Updated Headers
        if: steps.changed-files.outputs.changed_files != ''
        run: |
          if git diff --quiet; then
            echo "No changes to commit"
            exit 0
          fi

          commit_message="ci: Add 42 header"
          
          echo "Commit message: $commit_message"
          
          git add .
          git commit -m "$commit_message"
          git push